/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package modelo;

import controlador.ConexionMySQL;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.SQLException;
import javax.swing.JOptionPane;

/**
 *
 * @author alen
 */
public class CrudibrosBase extends javax.swing.JInternalFrame {

    /**
     * Creates new form CrudibrosBase
     */
    public CrudibrosBase() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToggleButton1 = new javax.swing.JToggleButton();
        jButton1 = new javax.swing.JButton();

        jToggleButton1.setText("eliminar libro");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jButton1.setText("modificar libro");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jToggleButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(245, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jToggleButton1)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(193, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    // Pedir al usuario la ID del libro a modificar
    String idLibroModificar = JOptionPane.showInputDialog("Ingrese la ID del libro a modificar:");
    if (idLibroModificar == null || idLibroModificar.isEmpty()) {
        JOptionPane.showMessageDialog(this, "ID de libro no válida", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Convertir la ID a entero
    int id;
    try {
        id = Integer.parseInt(idLibroModificar);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "ID de libro no válida", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Obtener los datos actualizados del libro
    String titulo = JOptionPane.showInputDialog("Ingrese el nuevo título:");
    String ISBN = JOptionPane.showInputDialog("Ingrese el nuevo ISBN:");
    String paginas = JOptionPane.showInputDialog("Ingrese el número de páginas:");
    String edicion = JOptionPane.showInputDialog("Ingrese la nueva edición:");
    String editorial = JOptionPane.showInputDialog("Ingrese la nueva editorial:");
    String lugar = JOptionPane.showInputDialog("Ingrese el nuevo lugar:");
    String fecha = JOptionPane.showInputDialog("Ingrese la nueva fecha de edición:");

    // Validar que los campos no estén vacíos
    if (titulo.isEmpty() || ISBN.isEmpty() || paginas.isEmpty() || edicion.isEmpty() ||
        editorial.isEmpty() || lugar.isEmpty() || fecha.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Todos los campos son obligatorios", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Convertir el número de páginas a entero
    int numPaginas;
    try {
        numPaginas = Integer.parseInt(paginas);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "El número de páginas debe ser un número entero", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Modificar el libro en la base de datos
    try (Connection con = ConexionMySQL.getConnection();
         CallableStatement cs = con.prepareCall("{CALL ModificarLibro(?, ?, ?, ?, ?, ?, ?, ?)}")) {
        cs.setInt(1, id);
        cs.setString(2, titulo);
        cs.setString(3, ISBN);
        cs.setInt(4, numPaginas);
        cs.setString(5, edicion);
        cs.setString(6, editorial);
        cs.setString(7, lugar);
        cs.setString(8, fecha);
        cs.execute();

        JOptionPane.showMessageDialog(this, "Libro modificado correctamente", "Éxito", JOptionPane.INFORMATION_MESSAGE);
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error al modificar libro: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
    // Pedir al usuario la ID del libro a eliminar
    String idLibroEliminar = JOptionPane.showInputDialog("Ingrese la ID del libro a eliminar:");
    if (idLibroEliminar == null || idLibroEliminar.isEmpty()) {
        JOptionPane.showMessageDialog(this, "ID de libro no válida", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Convertir la ID a entero
    int id;
    try {
        id = Integer.parseInt(idLibroEliminar);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "ID de libro no válida", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Eliminar el libro de la base de datos
    try (Connection con = ConexionMySQL.getConnection();
         CallableStatement cs = con.prepareCall("{CALL EliminarLibro(?)}")) {
        cs.setInt(1, id);
        cs.execute();

        JOptionPane.showMessageDialog(this, "Libro eliminado correctamente", "Éxito", JOptionPane.INFORMATION_MESSAGE);
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error al eliminar libro: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }    }//GEN-LAST:event_jToggleButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JToggleButton jToggleButton1;
    // End of variables declaration//GEN-END:variables
}
